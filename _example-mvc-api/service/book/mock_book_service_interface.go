// Code generated by MockGen. DO NOT EDIT.
// Source: book_service_interface.go

// Package book is a generated GoMock package.
package book

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	book "github.com/mkosakana/go-iris-sample/_example-mvc-api/model/book"
)

// MockBookServiceInterface is a mock of BookServiceInterface interface.
type MockBookServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceInterfaceMockRecorder
}

// MockBookServiceInterfaceMockRecorder is the mock recorder for MockBookServiceInterface.
type MockBookServiceInterfaceMockRecorder struct {
	mock *MockBookServiceInterface
}

// NewMockBookServiceInterface creates a new mock instance.
func NewMockBookServiceInterface(ctrl *gomock.Controller) *MockBookServiceInterface {
	mock := &MockBookServiceInterface{ctrl: ctrl}
	mock.recorder = &MockBookServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookServiceInterface) EXPECT() *MockBookServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookServiceInterface) CreateBook(bookRequest *book.BookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", bookRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookServiceInterfaceMockRecorder) CreateBook(bookRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookServiceInterface)(nil).CreateBook), bookRequest)
}

// DeleteBookById mocks base method.
func (m *MockBookServiceInterface) DeleteBookById(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookById indicates an expected call of DeleteBookById.
func (mr *MockBookServiceInterfaceMockRecorder) DeleteBookById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookById", reflect.TypeOf((*MockBookServiceInterface)(nil).DeleteBookById), id)
}

// GetBooks mocks base method.
func (m *MockBookServiceInterface) GetBooks() ([]book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks")
	ret0, _ := ret[0].([]book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockBookServiceInterfaceMockRecorder) GetBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockBookServiceInterface)(nil).GetBooks))
}

// UpdateBook mocks base method.
func (m *MockBookServiceInterface) UpdateBook(id int, bookRequest *book.BookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", id, bookRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookServiceInterfaceMockRecorder) UpdateBook(id, bookRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookServiceInterface)(nil).UpdateBook), id, bookRequest)
}
